#!/usr/bin/perl

package fontty;
use v5.38;
use feature 'class';
use strict; use warnings;
no warnings qw(experimental::class);
use Data::Printer;
use List::Util qw(first);
use Path::Tiny;
use Term::Choose;

class Font {
    use Data::Printer;
    field $name;
    field $size;
    field $filename :param;

    ADJUST 
    { ##no critic
        my $fn = $self->id();
        
        $fn =~ /^(?<name>\w+?)(?:[-_\.](?<size>.+))?$/mp;

        $name = $+{name};
        $size = $+{size};
    }

    method id() {
        my $fn = $filename;
        
        my @endings = qw(
            .gz
            .psf.gz
            .psfu.gz
            .fnt.gz
        );

        my $endings = join '|', @endings;

        $fn =~ s/^(?:.+\/)|($endings)$//g;
        return $fn
    }

    method name() 
    {
        return $name
    }

    method size() 
    {
        return $size
    }

    method filename() 
    {
        return $filename
    }

    method stringify() 
    {
        return sprintf(
            "Name: %s, size: %s (%s)", 
            $name//'undef', 
            $size//'undef', 
            $filename
        );
    } 

    method preview($tty) 
    {
        my $id = $self->id();

        my $c_arg = defined $tty ? " -C $tty" : '';

        my $cmd = "setfont $id$c_arg";
        
        say $cmd;
        `$cmd`;
    }
}

use Getopt::Long;
use constant DEFAULT_PATH => '/usr/share/kbd/consolefonts';

my %fonts; # is a hashsh $name => [Font]

my %actions = (
    list => { 
        sub => \&list,
        description => '[default] lists all available fonts and allows selection'
    },
    help => {
        sub => \&help,
        description => 'shows this information'
    },
    preview => {
        sub => \&preview,
        description => '[arg: font name] switches to the font. If there are different sizes, it allows selection.'
    },
    test => {
        sub => \&test,
        description => 'runs the test suite',
    }
);

sub main ()
{ 
    my $font_path = DEFAULT_PATH;
    my $tty;
    
    GetOptions(
        'dir=s' => \$font_path,
        'tty=s' => \$tty,
    );

    my %opts = (
        tty => $tty,
    );

    my @fonts = path($font_path)->children(qr/\.gz$/);

    return say "No fonts found at $font_path" 
        unless @fonts;

    for my $filename (@fonts) {
        my $font = Font->new(filename => $filename);
        push $fonts{$font->name()}->@*, $font;
    }

    for (keys %fonts) {
        if (1 == $fonts{$_}->@*) {
            my $font = $fonts{$_}->[0];
            delete $fonts{$_};
            $fonts{$font->id()} = [$font];
        }
    }

    my ($action_name, @args) = @ARGV;
    $action_name //= 'list';
    my $action = $actions{$action_name} // $actions{help};

    $action->{sub}->(\%opts, @args);
}

sub get_tty ($tty_nr) 
{
    my ($tty) = `who am i` =~ /tty(\d+)/;
    $tty_nr //= $tty; 

    return "/dev/tty$tty_nr" 
        if $tty_nr;

    return
}

sub list ($opts, @args)
{
    my $select = 
        Term::Choose->new({
            prompt => 'Please select',
            color => 2,
        });

    my $choice = $select->choose([sort keys %fonts]);

    preview($opts, $choice) 
        if $choice;
}

sub help ($opts, @args)
{
    say "Usage: fontpreview ACTION [ARGS]";
    say "The following actions are available:";

    for (sort keys %actions) {
        say "   *  $_: $actions{$_}->{description}";
    }
}

sub preview ($opts, $name, @args)
{
    return say "Please provide a font name. Use `fontty list` to show installed fonts."
        unless $name;

    my $fonts = $fonts{$name};

    return say "Font $name is not installed." 
        unless $fonts;

    my $font;

    if ($fonts->@* > 1) {
        say "Select a size:";

        my $selection = Term::Choose->new();
        
        my $id = $selection->choose( [ map { $_->id() } $fonts->@* ] );

        $font = first { $_->id() eq $id } $fonts->@*;
    }

    $font //= $fonts->[0];
    
    my $tty = get_tty($opts->{tty});

    $font->preview($tty);
}

sub test ($opts, @args)
{
    package tests;

    use Test2::V0;
    no warnings 'experimental::for_list';

    subtest construction_Font => sub 
    {
        my %filenames = (
            'UniCyr_8x14.psf.gz' => { name => 'UniCyr', size => '8x14'}, 
            'ter-216b.psf.gz' => { name => 'ter', size => '216b'}, 
            'lat7a-14.psfu.gz' => { name => 'lat7a', size => '14'}, 
            'arm8.fnt.gz' => { name => 'arm8', size => undef},
            'iso10.16.gz' => { name => 'iso10', size => '16', id => 'iso10.16'},
        );

        for my ($filename, $expect) (%filenames)
        {  
            my $f = Font->new(filename => $filename);

            is ( $f->name(), $expect->{name}, "got the right name" ) || diag $filename
                if exists $expect->{name};
            is ($f->size(), $expect->{size}, "got the right size") || diag $filename
                if exists $expect->{size};
            is ($f->id(), $expect->{id}, "got the right id") || diag $filename
                if exists $expect->{id};
        }
    };

    done_testing();
}

do {
    main()
} unless caller();

1;
